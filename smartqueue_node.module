<?php

/**
 * Implements hook_nodequeue_info().
 */
function smartqueue_node_nodequeue_info() {
  return array('smartqueue_node' => array(
    'title' => t('Node queue'),
    'description' => t('Each particular grouping of nodes from the selected node types have their own unique subqueue. You can place nodes into any of these subqueues based on which node type that node has been tagged with. Using this with large or too many node types may degrade performance.'),
    ));
}

/**
 * Implements hook_nodequeue_form().
 */
function smartqueue_node_nodequeue_form($queue, &$form) {
  // Load data about taxonomy_term_reference fields.
  $options = array();
  $fields = field_info_fields();

  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'node_reference') {
      $options[$field_name] = t('Field %field-name, selecting nodes from node type %node_type.', array('%field-name' => $field_name, '%node_type' => $field_name));
    }
  }

  $form['placeholder']['node_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node fields'),
    '#description' => t('Select which node types to use; each unique combination of types from all of these fields will have a subqueue.'),
    '#options' => $options,
  );

  $form['subqueue_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Subqueue title'),
    '#default_value' => $queue->subqueue_title,
    '#size' => 50,
    '#maxlength' => 64,
    '#description' => t('What to display for the subqueue title; use %subqueue to embed the actual subqueue title. This is used to distinguish multiple nodequeues with subqueues from each other, as internal subqueue title is filled automatically.'),
  );

  // Fields can be selected just when creating new taxonomy smartqueue.
  // Disable it after that.
  if (!empty($queue->qid)) {
    $form['placeholder']['node_fields']['#disabled'] = TRUE;
    $form['placeholder']['node_fields']['#default_value'] = explode('-', $queue->reference);
  }
}

/**
 * Implements hook_nodequeue_form_validate().
 */
function smartqueue_node_nodequeue_form_validate($queue, &$form_state, &$form) {
  if (!isset($queue->qid)) {
    $field_names = array_keys(array_filter($form_state['values']['node_fields']));
    if (empty($field_names)) {
      form_error($form['placeholder']['node_fields'], t('You must select at least one field.'));
    }

    // Convert this to our reference.
    form_set_value($form['reference'], implode('-', $field_names), $form_state);
  }
}

/**
 * Implements hook_nodequeue_form_submit_finish().
 */
function smartqueue_node_nodequeue_form_submit_finish($queue, $form_state) {
  // Check if queue already exists.
  $qid = db_select('smartqueue', 's')
    ->fields('s', array('qid'))
    ->condition('qid', $queue->qid)
    ->execute()
    ->fetchField();

  if ($qid) {
    // Update existing queue.
    db_update('smartqueue')
      ->fields(array(
        'use_parents' => $form_state['values']['use_parents'],
      ))
      ->condition('qid', $queue->qid)
      ->execute();
  }
  else {
    // Insert new queue.
    db_insert('smartqueue')
      ->fields(array(
        'qid' => $queue->qid,
        'use_parents' => $form_state['values']['use_parents'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_nodequeue_subqueues().
 *
 * Returns list of references for subqueues that can host a given node.
 */
function smartqueue_node_nodequeue_subqueues(&$queue, $node) {
  $field_names = array();

  // Check if at least one supported field exists in node and load
  // selected tids.
  foreach (explode('-', $queue->reference) as $field_name) {
    // Save nids.
    if ($field_values = field_get_items('node', $node, $field_name)) {
      $field_names[$field_name] = array();
      foreach ($field_values as $field_value) {
        $field_names[$field_name][] = $field_value['nid'];
      }
    }
  }

  

  // Forbid NO terms being set, but allow
  // various non-terms to be set.
  $empty = TRUE;
  foreach ($field_names as $field_name => $nids) {
    if (!empty($nids)) {
      $empty = FALSE;
    }
    if (!count($field_names[$field_name])) {
      $field_names[$field_name][] = 0;
    }
  }

  if ($empty) {
    return;
  }

  // Build reference strings for all subqueues.
  $references = smartqueue_build_string(array_filter($field_names));

  // We're returning an array of references for efficiency, but we also have
  // to check to see if the references we've generated exist. If they don't,
  // we have to create them.
  $exists = array();
  $subqueues = nodequeue_load_subqueues_by_reference(array($queue->qid => $references));
  foreach ($subqueues as $subqueue) {
    $exists[$subqueue->reference] = TRUE;
  }

  // Create subqueues if needed.
  foreach ($references as $reference) {
    if (empty($exists[$reference])) {
      nodequeue_add_subqueue($queue, smartqueue_node_nodequeue_subqueue_title($queue, $reference), $reference);
    }
  }

  return $references;
}

/**
 * Implements hook_nodequeue_alter().
 */
function smartqueue_node_nodequeue_alter(&$data, $type) {
  switch ($type) {
    case 'load_queues':
      $qids = array_keys($data);
      $result = db_query("SELECT qid, use_parents FROM {smartqueue} WHERE qid IN (:qids)", array(':qids' => $qids));
      foreach ($result as $queue) {
        $data[$queue->qid]->use_parents = $queue->use_parents;
      }
      break;
  }
}

/**
 * Build an array of strings that represents all of the possible term
 * combinations.
 */
function smartqueue_node_build_string($arrays) {
  $array = array_shift($arrays);
  $term = '';
  if (empty($arrays)) {
    return $array;
  }

  $substrings = smartqueue_build_string($arrays);
  $strings = array();

  foreach ($array as $term) {
    foreach ($substrings as $string) {
      $strings[] = "$term-$string";
    }
  }

  return $strings;
}


/**
 * Implements hook_node_update().
 *
 * Updates subqueue title if node name changes.
 */
function smartqueue_node_node_update($node) {
  // Find subqueues that contain this node.
  $result = db_query(
    "SELECT nq.reference AS reference, sq.reference AS sqref, sq.sqid
    FROM {nodequeue_queue} nq
    INNER JOIN {nodequeue_subqueue} sq ON nq.qid = sq.qid
    WHERE nq.owner = 'smartqueue_node'
    AND (sq.reference = ?
      OR sq.reference LIKE ?
      OR sq.reference LIKE ?
      OR sq.reference LIKE ?)",
    array($node->nid, '%-' . $node->nid, $node->nid . '-%', '%-' . $node->nid . '-%'))
    ->fetchAll();

  foreach ($result as $row) {
    // Note that $row already contains the needed $row->reference.
    $title = $node->title;
    nodequeue_subqueue_update_title($row->sqid, $title);
  }
}

/**
 * Implements hook_node_delete().
 *
 * Deletes subqueue if term is removed
 */
function smartqueue_node_node_delete($node) {
  // Find subqueues that contain this node.
  $result = db_query(
    "SELECT sq.sqid FROM {nodequeue_subqueue} sq
    INNER JOIN {nodequeue_queue} nq ON sq.qid = nq.qid
    WHERE nq.owner = 'smartqueue_node'
    AND (sq.reference = ?
      OR sq.reference LIKE ?
      OR sq.reference LIKE ?
      OR sq.reference LIKE ?)",
    array($node->nid, '%-' . $node->nid, $node->nid . '-%', '%-' . $node->nid . '-%')
  )->fetchAll();

  foreach ($result as $row) {
    nodequeue_remove_subqueue($row->sqid);
  }
}

